-- The blockchain is DER encoded ASN.1
-- This file contains the ASN.1 descriptions

-- milliseconds since june 19th 1999 07:00:00.000 UTC
Time                    ::=INTEGER

-- Collision safe hash
Hash                    ::=SEQUENCE {
    sha2                OCTET STRING SIZE (32),
    sha3                OCTET STRING SIZE (32)
}

-- Curve25519 x coordinate
PublicKey               ::=OCTET STRING SIZE (32)

-- SHA2-256(SHA3-256(public x coordinate))
Address                 ::=OCTET STRING SIZE (32)

-- 32-byte x coordinate || 32-byte y coordinate
Signature               ::=OCTET STRING SIZE (64)

-- Describes an amount of fluffycoins
Specie                  ::=SEQUENCE {
    coins               INTEGER (0..MAX) OPTIONAL,
    -- 1/100000000 of a coin
    fluffs              INTEGER (0..99999999)
}

-- First block
Genesis                 ::=SEQUENCE {
    -- Protocol version
    protocol            INTEGER (0),
    -- Name of blockchain (ASCII "Fluffycoin" unless forked)
    name                UTF8STRING,
    -- Instance number of blockchain
    version             INTEGER (0..MAX),
    -- Time when genesis block is instantiated
    creation            Time,
    -- Address for blockchain creator
    creator             Address,
    -- Initial coins given to blockchain creator
    -- The proof of stake requires coins to exist for mining to happen
    greed               Specie,
    -- Personalize blockchain
    seed                OCTET STRING SIZE (0..68719476736)
}

-- Validators vote if they agree with the round leader
Validation              ::=SEQUENCE {
    verified            BOOLEAN,
    authAddress         Address, -- TODO: Needs to be part of the signature
    signature           Signature
}

-- Every so often all of the chains recombine into a single block
-- This is a bit of a bottleneck that synchronizes all of the sub-chains
-- It is used to count an arbitrary amount of time in blockchain operations
ReconciliationContent   ::=SEQUENCE {
    -- Protocol version can change any time by concensus
    -- All nodes after a reconciliation protocol change use the new protocol
    protocol            INTEGER (0),
    -- Time of reconciliation
    time                Time,
    -- Monotomically increments every reconciliation block starting at zero
    chainId             INTEGER (0..MAX),
    -- Ordered hashes of the last node of every sub-chain
    shardHashes         SEQUENCE OF Hash SIZE (1..64),
    -- The round leader for the reconciliation block
    leader              Address,
    leaderKey           PublicKey,
    newAddress          Address
}
Reconciliation          ::=SEQUENCE {
    content             ReconciliationContent,
    -- Signature over content
    signature           Signature,
    -- Distributed validation of the reconciliation block
    votes               SET OF Validation SIZE (1..MAX)
}

-- A normal node in the blockchain where all the transactions happen
NodeContent             ::=SEQUENCE {
    chainId             INTEGER (0..MAX),
    shardId             INTEGER (0..63),
    index               INTEGER (0..10240),
    prevHash            Hash,
    transactions        SEQUENCE SIZE (1..104857600) OF Transaction,
    nonce               OCTET STRING SIZE (8),
    leader              Address,
    newAddress          Address
}
Node                    ::=SEQUENCE {
    content             NodeContent,
    signature           Signature,
    votes               SET OF Validation SIZE (1..MAX)
}

-- Wrapper for a block in the blockchain that identifies what kind of block it is
Block                   ::=CHOICE {
    null                [0] NULL,
    genesis             [1] Genesis,
    reconciliation      [2] Reconciliation,
    node                [3] Node
}

TransactionContent      ::=SEQUENCE {
    time                Time,
    action              ::CHOICE {
        null                [0] NULL,
        transfer            [1] Transfer,
        lotto               [2] LotteryTicket,
        burn                [3] Donation,
        mine                [3] MineAction,
        stock               [4] StockAction,
        vote                [5] VoteAction,
        loan                [6] LoanAction,
    },
    signer              Address,
    signerKey           PublicKey,
    newAddress          Address
}
Transaction             ::=SEQUENCE {
    content             TransactionContent,
    signature           Signature,
}

MineAction              ::=SEQUENCE {
    CHOICE {
        null                [0] NULL,
        register            [1] Register,
        unregister          [2] Unregister,
        updateCreds         [3] CredentialChange
    }
}

StockAction             ::=SEQUENCE {
    CHOICE {
        null                [0] NULL,
        newPrivateStock     [1] NewPrivateStock,
        newPublicStock      [2] NewPublicStock
    }
}

VoteAction              ::=SEQUENCE {
    CHOICE {
        null                [0] NULL,
        newVote             [1] NewVote,
        vote                [2] PublicVote,
    }
}

LoanAction              ::=SEQUENCE {
    CHOICE {
        null                [0] NULL,
        offerLoan           [1] NewLoan,
        cancelLoan          [2] CancelLoan,
        acceptLoan          [3] AcceptLoan,
        forgiveLoan         [4] ForgiveLoan,
        forwardLoan         [5] ForwardLoan,
        prepayLoan          [6] PrepayLoan
    }
}

RegisterContent         ::=SEQUENCE {
    stakeAmount         Specie,
    stakeAddress        Address,
    stakeKey            PublicKey,
    newAddress          Address,
    authAddress         Address,
    authKey             PublicKey
}

Register                ::=SEQUENCE {
    content             RegisterConent,
    stakeSignature      Signature,
    authSignature       Signature
}

Unregister              ::=SEQUENCE {
    authAddress         Address,
    authSignature       Signature
}

CredentialChangeContent ::=SEQUENCE {
    -- Existing auth address
    authAddress         Address,
    -- New auth address
    newAuthAddress      Address,
    -- New auth public key
    newAuthKey          PublicKey,
    -- Existing stake address
    stakeAddress        Address,
    -- Existing stake key
    stakeKey            PublicKey,
    -- New stake address
    newStakeAddress     Address
}

CredentialChange        ::=SEQUENCE {
    content             CredentialChangeContent,
    authSignature       Signature,
    newAuthSignature    Signature,
    stakeSignature      Signature
}

Exchange                ::=SEQUENCE {
    receiver            Address,
    amount              Specie
}

Transfer                ::=SEQUENCE {
    exchanges           SEQUENCE SIZE (1..MAX) OF Exchange,
    coin                UTF8STRING OPTIONAL
}

LotteryTicket           ::=SEQUENCE {
    seed                OCTET STRING SIZE (0..16),
    bet                 Specie
}

NewPrivateStock         ::=SEQUENCE {
    ticker              PRINTABLESTRING SIZE (3..MAX),
    shares              INTEGER (1..10000000000),
    -- Must be at least 1 coin
    burn                Specie
}

-- Invisible wallet receives all initial bids of matching price during the IPO
-- After the IPO, that wallet automatically buys stocks at or below the IPO price until out of money
NewPublicStock          ::=SEQUENCE {
    ticker              PRINTABLESTRING SIZE (3..MAX),
    shares              INTEGER (1..10000000000),
    price               Specie,
    -- How many reconsiliation blocks until IPO ends
    ipoDuration         INTEGER (1..100),
    -- Must be at least 1 coin
    burn                Specie
}

Donation                ::=Specie

VoteAnswer              ::=SEQUENCE {
    vote                UTF8STRING,
    -- You committment can't be traded until the next reconsiliation block
    committment         Specie
}

NewVote                 ::=SEQUENCE {
    uuid                UTF8STRING SIZE (1..128),
    context             OCTET STRING SIZE (16..MAX),
    answer              CHOICE {
        yesno               [0] NULL,
        choice              [1] SEQUENCE OF VoteAnswer SIZE (2..MAX),
        any                 [2] NULL
    }
}

PublicVote              ::=SEQEUNCE {
    uuid                UTF8STRING (128),
    vote                OCTET STRING
}

-- Loans take effect at the next reconsiliation block
NewLoan                 ::=SEQUENCE {
    -- Total tokens loaning at this agreement
    amount              Specie,
    -- McBucks (Must be at least 1 coin in outstanding owed loans)
    coin                UTF8STRING OPTIONAL,
    -- Amount extra needed to pay every reconsiliation block
    interest            Specie,
    -- The loan automatically expires after this many reconsiliation blocks
    offerExpiration     INTEGER,
    -- The loan needs to be payed back in full after this many reconsiliation blocks after accepting
    loanExpiration      INTEGER,
}

CancelLoan              ::=SEQUENCE {
    loanid              HashId,
    index               INTEGER (0..MAX) OPTIONAL
}

AcceptLoan              ::=SEQUENCE {
    loanid              HashId,
    amount              Specie,
    burn                Specie,
    -- McBucks
    coin                OCTET STRING
}

ForgiveLoan             ::=SEQUENCE {
    loanid              HashId,
    index               INTEGER (0..MAX) OPTIONAL,
    amount              Specie
}

ForwardLoan             ::=SEQUENCE {
    loanid              HashId,
    index               INTEGER (0..MAX) OPTIONAL,
    newAddress          Address,
    forwardTime         Time,
    accept              Signature
}

PrepayLoan              ::=SEQUENCE {
    loanid              HashId,
    index               INTEGER (0..MAX) OPTIONAL,
    amount              Specie
}

